name: Tests

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main]

jobs:
  test-node:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download required addons for testing
        run: |
          mkdir -p extraResources/addons
          # Download minimal addons needed for tests
          if [ "$RUNNER_OS" == "Linux" ]; then
            curl -L -f https://github.com/MaurUppi/whisper.cpp-openvino/releases/download/default-v20250806-141833/addon-linux-openvino.node \
              -o extraResources/addons/addon-linux-openvino.node || echo "OpenVINO addon download failed, using mocks"
          fi
          # Create addon manifest for tests
          cat > extraResources/addons/addon-manifest.json << EOF
          {
            "platform": "${{ runner.os }}",
            "arch": "x64",
            "openvinoVersion": "2024.6.0",
            "buildType": "test",
            "generatedAt": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "addons": {
              "primary": "addon-test.node"
            }
          }
          EOF
          ls -la extraResources/addons/

      - name: Audit dependencies for security vulnerabilities
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Run linting and formatting check
        run: npm run format -- --check

      - name: Run type checking
        run: npx tsc --noEmit --project .

      - name: Run unit tests (Node.js)
        run: npm run test:ts -- --testPathIgnorePatterns="production|e2e|performance|functional|edge-cases|integration|enhancedLogging|distributionPackaging|existingFunctionality|fallbackChains|addonLoading|addonManager|developmentMockSystem|testUtils|hardwareDetection|mockGPUData|gpuSelection|subtitleGeneration|windowsCompatibility|parameterProcessor" --testNamePattern="^((?!Event System|Workflow).)*$"

      - name: Run React component tests (jsdom)
        id: tsx-tests
        continue-on-error: true
        run: node scripts/check-test-threshold.js

      - name: Check test threshold results
        if: steps.tsx-tests.outcome == 'failure'
        run: |
          echo "::warning::React component tests are below 80% pass rate. See test-results-tsx.json for details."
          echo "Test threshold check failed but continuing workflow"
          # Optionally fail the job if you want strict enforcement
          # exit 1

      - name: Upload TSX test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tsx-test-results-${{ matrix.node-version }}
          path: test-results-tsx.json
          retention-days: 30

      - name: Run distribution packaging tests
        run: npm run test:distribution

      - name: Verify build process
        run: npm run build
        env:
          NODE_ENV: production

      - name: Run production validation
        run: npm run test:production
        continue-on-error: true

      - name: Run all tests with coverage
        run: npm run test:coverage -- --testPathIgnorePatterns="production|e2e|performance|functional|edge-cases|integration" || true
        continue-on-error: true

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml
            **/*.log
          retention-days: 30

  test-openvino:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            openvino_version: '2024.6.0'
            kernel_version: '6.8+'
          - os: ubuntu-22.04
            openvino_version: '2024.6.0'
            kernel_version: '5.15+'
          - os: windows-2022
            openvino_version: '2024.6.0'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: npm ci

      - name: Run basic type checking
        run: npx tsc --noEmit --project .

      - name: Install OpenVINO toolkit (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          # Determine Ubuntu version and correct filename for OpenVINO 2024.6.0
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            OPENVINO_FILENAME="l_openvino_toolkit_ubuntu22_2024.6.0.17404.4c0f47d2335_x86_64.tgz"
          elif [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
            OPENVINO_FILENAME="l_openvino_toolkit_ubuntu22_2024.6.0.17404.4c0f47d2335_x86_64.tgz"
          else
            OPENVINO_FILENAME="l_openvino_toolkit_ubuntu20_2024.6.0.17404.4c0f47d2335_x86_64.tgz"
          fi

          # Download with correct filename and better error handling
          OPENVINO_URL="https://storage.openvinotoolkit.org/repositories/openvino/packages/2024.6/linux/$OPENVINO_FILENAME"
          echo "Downloading OpenVINO from: $OPENVINO_URL"

          wget --no-check-certificate --timeout=30 --tries=3 "$OPENVINO_URL" -O openvino.tgz

          # Verify the downloaded file is actually a gzip file
          if ! file openvino.tgz | grep -q "gzip compressed"; then
            echo "Downloaded file is not a valid gzip archive. Contents:"
            head -n 20 openvino.tgz
            echo "Skipping OpenVINO installation for now..."
            echo "OPENVINO_INSTALL_DIR=" >> $GITHUB_ENV
            exit 0
          fi

          tar -xzf openvino.tgz

          # Debug: List extracted contents
          echo "Extracted contents:"
          ls -la l_openvino_toolkit_ubuntu*

          # Create target directory structure
          sudo mkdir -p /opt/intel/

          # Move the extracted directory with proper handling
          EXTRACTED_DIR=$(ls -d l_openvino_toolkit_ubuntu*_x86_64 | head -1)
          echo "Moving $EXTRACTED_DIR to /opt/intel/openvino_${{ matrix.openvino_version }}"
          sudo mv "$EXTRACTED_DIR" /opt/intel/openvino_${{ matrix.openvino_version }}
          echo "OPENVINO_INSTALL_DIR=/opt/intel/openvino_${{ matrix.openvino_version }}" >> $GITHUB_ENV

      - name: Install OpenVINO toolkit (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://storage.openvinotoolkit.org/repositories/openvino/packages/2024.6/w_openvino_toolkit_windows_${{ matrix.openvino_version }}_x86_64.zip" -OutFile "openvino.zip"
          Expand-Archive -Path "openvino.zip" -DestinationPath "C:\temp\openvino"
          Move-Item "C:\temp\openvino\w_openvino_toolkit_windows*" "C:\intel\openvino_${{ matrix.openvino_version }}"
          echo "OPENVINO_INSTALL_DIR=C:\intel\openvino_${{ matrix.openvino_version }}" >> $env:GITHUB_ENV

      - name: Test OpenVINO integration
        run: npm run test:ts -- --testNamePattern="openvino|OpenVINO" --testPathIgnorePatterns="production|e2e|performance"

      - name: Validate GPU detection
        run: npm run test -- --testPathPattern="gpu"

      - name: Test AMD GPU CPU-only processing
        run: npm run test -- --testPathPattern="amd|AMD" --testNamePattern="cpu.*only"

      - name: Test CUDA version-specific addon selection
        run: npm run test -- --testPathPattern="cuda" --testNamePattern="version|1241|1220|1180"

      - name: Test fallback chain logic
        run: npm run test -- --testPathPattern="fallback" --testNamePattern="chain|fallback"

      - name: Test GPU selector enhancements
        run: npm run test:ts -- --testNamePattern="GPU.*[Ss]election|selector" --testPathIgnorePatterns="production|e2e|performance"
